/**
 * generated by Xtext
 */
package org.xtext.unq.planificador.validation;

import com.google.common.collect.Iterables;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.xtext.unq.planificador.planificadorDeMateriasDsl.Asignacion;
import org.xtext.unq.planificador.planificadorDeMateriasDsl.Aula;
import org.xtext.unq.planificador.planificadorDeMateriasDsl.AulaHorario;
import org.xtext.unq.planificador.planificadorDeMateriasDsl.Dedicacion;
import org.xtext.unq.planificador.planificadorDeMateriasDsl.ElementosPrimarios;
import org.xtext.unq.planificador.planificadorDeMateriasDsl.Materia;
import org.xtext.unq.planificador.planificadorDeMateriasDsl.Model;
import org.xtext.unq.planificador.planificadorDeMateriasDsl.Planificacion;
import org.xtext.unq.planificador.planificadorDeMateriasDsl.PlanificadorDeMateriasDslPackage;
import org.xtext.unq.planificador.planificadorDeMateriasDsl.Profesor;
import org.xtext.unq.planificador.planificadorDeMateriasDsl.Recurso;
import org.xtext.unq.planificador.validation.AbstractPdmValidator;

/**
 * Custom validation rules.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
@SuppressWarnings("all")
public class PdmValidator extends AbstractPdmValidator {
  @Check
  public void validateMateriasAsignadas(final Planificacion p) {
    EObject _eContainer = p.eContainer();
    Model model = ((Model) _eContainer);
    EList<ElementosPrimarios> _elementosPrimarios = model.getElementosPrimarios();
    Iterable<Materia> _filter = Iterables.<Materia>filter(_elementosPrimarios, Materia.class);
    for (final Materia m : _filter) {
      this.estaAsignado(p, m);
    }
  }
  
  public void estaAsignado(final Planificacion p, final Materia m) {
    EList<Asignacion> _asignaciones = p.getAsignaciones();
    final Function1<Asignacion, Boolean> _function = new Function1<Asignacion, Boolean>() {
      public Boolean apply(final Asignacion a) {
        Materia _materia = a.getMateria();
        String _name = _materia.getName();
        String _name_1 = m.getName();
        return Boolean.valueOf(_name.equals(_name_1));
      }
    };
    boolean _exists = IterableExtensions.<Asignacion>exists(_asignaciones, _function);
    boolean _not = (!_exists);
    if (_not) {
      this.error("Falta asignar una materia", m, PlanificadorDeMateriasDslPackage.Literals.MATERIA__NAME);
    }
  }
  
  @Check
  public void validateMateriasRepetidas(final Model m) {
    EList<ElementosPrimarios> _elementosPrimarios = m.getElementosPrimarios();
    final Iterable<Materia> materias = Iterables.<Materia>filter(_elementosPrimarios, Materia.class);
    final Procedure1<Materia> _function = new Procedure1<Materia>() {
      public void apply(final Materia materia) {
        PdmValidator.this.estaRepetido(materia, materias);
      }
    };
    IterableExtensions.<Materia>forEach(materias, _function);
  }
  
  public void estaRepetido(final Materia materia, final Iterable<Materia> m) {
    int count = 0;
    for (final Materia mat : m) {
      String _name = mat.getName();
      String _name_1 = materia.getName();
      boolean _equals = _name.equals(_name_1);
      if (_equals) {
        count = (count + 1);
      }
    }
    if ((count >= 2)) {
      this.error("Materia repetida", materia, PlanificadorDeMateriasDslPackage.Literals.MATERIA__NAME);
    }
  }
  
  @Check
  public void validateTieneLosRecursosNecesarios(final Planificacion p) {
    EObject _eContainer = p.eContainer();
    Model model = ((Model) _eContainer);
    EList<ElementosPrimarios> _elementosPrimarios = model.getElementosPrimarios();
    Iterable<Materia> _filter = Iterables.<Materia>filter(_elementosPrimarios, Materia.class);
    for (final Materia m : _filter) {
      boolean _tieneRecursos = this.tieneRecursos(m);
      if (_tieneRecursos) {
        EList<Asignacion> _asignaciones = p.getAsignaciones();
        this.verificarRecursosEnMateria(m, _asignaciones);
      }
    }
  }
  
  public void verificarRecursosEnMateria(final Materia m, final List<Asignacion> asignaciones) {
    final Procedure1<Asignacion> _function = new Procedure1<Asignacion>() {
      public void apply(final Asignacion a) {
        Materia _materia = a.getMateria();
        String _name = _materia.getName();
        String _name_1 = m.getName();
        boolean _equals = _name.equals(_name_1);
        if (_equals) {
          EList<AulaHorario> _aulaHorarios = a.getAulaHorarios();
          final Procedure1<AulaHorario> _function = new Procedure1<AulaHorario>() {
            public void apply(final AulaHorario aulaHorario) {
              Aula _aula = aulaHorario.getAula();
              EList<Recurso> _recursos = _aula.getRecursos();
              PdmValidator.this.tieneLosRecursosNecesarios(m, _recursos);
            }
          };
          IterableExtensions.<AulaHorario>forEach(_aulaHorarios, _function);
        }
      }
    };
    IterableExtensions.<Asignacion>forEach(asignaciones, _function);
  }
  
  public void tieneLosRecursosNecesarios(final Materia m, final List<Recurso> recursos) {
    final Procedure1<Recurso> _function = new Procedure1<Recurso>() {
      public void apply(final Recurso r) {
        EList<Recurso> _recursos = m.getRecursos();
        final Function1<Recurso, Boolean> _function = new Function1<Recurso, Boolean>() {
          public Boolean apply(final Recurso rec) {
            String _name = rec.getName();
            String _name_1 = r.getName();
            return Boolean.valueOf(_name.equals(_name_1));
          }
        };
        boolean _exists = IterableExtensions.<Recurso>exists(_recursos, _function);
        boolean _not = (!_exists);
        if (_not) {
          PdmValidator.this.error("La materia esta siendo asignada sin los recursos necesarios", m, 
            PlanificadorDeMateriasDslPackage.Literals.MATERIA__NAME);
        }
      }
    };
    IterableExtensions.<Recurso>forEach(recursos, _function);
  }
  
  public boolean tieneRecursos(final Materia m) {
    EList<Recurso> _recursos = m.getRecursos();
    int _size = _recursos.size();
    return (_size > 0);
  }
  
  @Check
  public void validateDedicacion(final Profesor p) {
    EObject _eContainer = p.eContainer();
    this.materiasQueDicta(p, ((Model) _eContainer));
  }
  
  public void validarDedicacion(final Profesor p, final int materiasQueDicta, final Planificacion pl) {
    boolean _and = false;
    Dedicacion _dedicacion = p.getDedicacion();
    EClass _eClass = _dedicacion.eClass();
    String _name = _eClass.getName();
    boolean _equals = _name.equals("EXCLUSIVA");
    if (!_equals) {
      _and = false;
    } else {
      _and = ((materiasQueDicta < 2) || (materiasQueDicta > 5));
    }
    if (_and) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Tiene ");
      _builder.append(materiasQueDicta, "");
      _builder.append(" materia asignada y necesita de 2 hasta 5 materias");
      this.error(_builder.toString(), p, 
        PlanificadorDeMateriasDslPackage.Literals.PROFESOR__NAME);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Tiene ");
      _builder_1.append(materiasQueDicta, "");
      _builder_1.append(" materia asignada y necesita de 2 hasta 5 materias");
      this.error(_builder_1.toString(), pl, 
        PlanificadorDeMateriasDslPackage.Literals.PLANIFICACION__ASIGNACIONES);
    }
    boolean _and_1 = false;
    Dedicacion _dedicacion_1 = p.getDedicacion();
    EClass _eClass_1 = _dedicacion_1.eClass();
    String _name_1 = _eClass_1.getName();
    boolean _equals_1 = _name_1.equals("SEMI");
    if (!_equals_1) {
      _and_1 = false;
    } else {
      _and_1 = (materiasQueDicta != 2);
    }
    if (_and_1) {
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("Tiene ");
      _builder_2.append(materiasQueDicta, "");
      _builder_2.append(" materia asignada y necesita de 2 materias");
      this.error(_builder_2.toString(), p, 
        PlanificadorDeMateriasDslPackage.Literals.PROFESOR__NAME);
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append("Tiene ");
      _builder_3.append(materiasQueDicta, "");
      _builder_3.append(" materia asignada y necesita de 2 materias");
      this.error(_builder_3.toString(), pl, 
        PlanificadorDeMateriasDslPackage.Literals.PLANIFICACION__ASIGNACIONES);
    }
    boolean _and_2 = false;
    Dedicacion _dedicacion_2 = p.getDedicacion();
    EClass _eClass_2 = _dedicacion_2.eClass();
    String _name_2 = _eClass_2.getName();
    boolean _equals_2 = _name_2.equals("SIMPLE");
    if (!_equals_2) {
      _and_2 = false;
    } else {
      _and_2 = (materiasQueDicta != 1);
    }
    if (_and_2) {
      StringConcatenation _builder_4 = new StringConcatenation();
      _builder_4.append("Tiene ");
      _builder_4.append(materiasQueDicta, "");
      _builder_4.append(" materia asignada y necesita de 1 materia");
      this.error(_builder_4.toString(), p, 
        PlanificadorDeMateriasDslPackage.Literals.PROFESOR__NAME);
      StringConcatenation _builder_5 = new StringConcatenation();
      _builder_5.append("Tiene ");
      _builder_5.append(materiasQueDicta, "");
      _builder_5.append(" materia asignada y necesita de 1 materia");
      this.error(_builder_5.toString(), pl, 
        PlanificadorDeMateriasDslPackage.Literals.PLANIFICACION__ASIGNACIONES);
    }
  }
  
  public void materiasQueDicta(final Profesor p, final Model model) {
    EList<Planificacion> planificaciones = model.getPlanificacion();
    int count = 0;
    for (final Planificacion planificacion : planificaciones) {
      {
        EList<Asignacion> _asignaciones = planificacion.getAsignaciones();
        for (final Asignacion a : _asignaciones) {
          EList<Profesor> _profesores = a.getProfesores();
          final Function1<Profesor, Boolean> _function = new Function1<Profesor, Boolean>() {
            public Boolean apply(final Profesor profe) {
              String _name = profe.getName();
              String _name_1 = p.getName();
              return Boolean.valueOf(_name.equals(_name_1));
            }
          };
          boolean _exists = IterableExtensions.<Profesor>exists(_profesores, _function);
          if (_exists) {
            count = (count + 1);
          }
        }
        this.validarDedicacion(p, count, planificacion);
        count = 0;
      }
    }
  }
}
