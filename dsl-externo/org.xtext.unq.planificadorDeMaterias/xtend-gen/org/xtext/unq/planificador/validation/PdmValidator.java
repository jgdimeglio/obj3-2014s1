/**
 * generated by Xtext
 */
package org.xtext.unq.planificador.validation;

import com.google.common.collect.Iterables;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.xtext.unq.planificador.planificadorDeMateriasDsl.Asignacion;
import org.xtext.unq.planificador.planificadorDeMateriasDsl.Aula;
import org.xtext.unq.planificador.planificadorDeMateriasDsl.AulaHorario;
import org.xtext.unq.planificador.planificadorDeMateriasDsl.CargaHoraria;
import org.xtext.unq.planificador.planificadorDeMateriasDsl.Dedicacion;
import org.xtext.unq.planificador.planificadorDeMateriasDsl.Dia;
import org.xtext.unq.planificador.planificadorDeMateriasDsl.DiaHorario;
import org.xtext.unq.planificador.planificadorDeMateriasDsl.Disponibilidad;
import org.xtext.unq.planificador.planificadorDeMateriasDsl.ElementosPrimarios;
import org.xtext.unq.planificador.planificadorDeMateriasDsl.ElementosSecundarios;
import org.xtext.unq.planificador.planificadorDeMateriasDsl.Horario;
import org.xtext.unq.planificador.planificadorDeMateriasDsl.Materia;
import org.xtext.unq.planificador.planificadorDeMateriasDsl.Model;
import org.xtext.unq.planificador.planificadorDeMateriasDsl.Planificacion;
import org.xtext.unq.planificador.planificadorDeMateriasDsl.PlanificadorDeMateriasDslPackage;
import org.xtext.unq.planificador.planificadorDeMateriasDsl.Profesor;
import org.xtext.unq.planificador.planificadorDeMateriasDsl.Recurso;
import org.xtext.unq.planificador.planificadorDeMateriasDsl.SEMI;
import org.xtext.unq.planificador.validation.AbstractPdmValidator;

/**
 * Custom validation rules.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
@SuppressWarnings("all")
public class PdmValidator extends AbstractPdmValidator {
  @Check
  public void esHorarioValido(final Horario horario) {
    boolean _or = false;
    int _desde = horario.getDesde();
    boolean _lessThan = (_desde < 0);
    if (_lessThan) {
      _or = true;
    } else {
      int _desde_1 = horario.getDesde();
      boolean _greaterThan = (_desde_1 > 24);
      _or = _greaterThan;
    }
    if (_or) {
      this.error("Horario desde tiene formato invalido", horario, 
        PlanificadorDeMateriasDslPackage.Literals.HORARIO__DESDE);
    }
    boolean _or_1 = false;
    int _hasta = horario.getHasta();
    boolean _lessThan_1 = (_hasta < 0);
    if (_lessThan_1) {
      _or_1 = true;
    } else {
      int _hasta_1 = horario.getHasta();
      boolean _greaterThan_1 = (_hasta_1 > 24);
      _or_1 = _greaterThan_1;
    }
    if (_or_1) {
      this.error("Horario hasta tiene formato invalido", horario, 
        PlanificadorDeMateriasDslPackage.Literals.HORARIO__HASTA);
    }
  }
  
  @Check
  public void validateMateriasAsignadas(final Planificacion p) {
    EObject _eContainer = p.eContainer();
    Model model = ((Model) _eContainer);
    EList<ElementosPrimarios> _elementosPrimarios = model.getElementosPrimarios();
    Iterable<Materia> _filter = Iterables.<Materia>filter(_elementosPrimarios, Materia.class);
    for (final Materia m : _filter) {
      this.estaAsignado(p, m);
    }
  }
  
  public void estaAsignado(final Planificacion p, final Materia m) {
    EList<Asignacion> _asignaciones = p.getAsignaciones();
    final Function1<Asignacion, Boolean> _function = new Function1<Asignacion, Boolean>() {
      public Boolean apply(final Asignacion a) {
        Materia _materia = a.getMateria();
        String _name = _materia.getName();
        String _name_1 = m.getName();
        return Boolean.valueOf(_name.equals(_name_1));
      }
    };
    boolean _exists = IterableExtensions.<Asignacion>exists(_asignaciones, _function);
    boolean _not = (!_exists);
    if (_not) {
      this.error("Falta asignar una materia", m, PlanificadorDeMateriasDslPackage.Literals.MATERIA__NAME);
    }
  }
  
  @Check
  public void validateAulasRepetidas(final Model m) {
    EList<ElementosSecundarios> _elementosSecundarios = m.getElementosSecundarios();
    final Iterable<Aula> aulas = Iterables.<Aula>filter(_elementosSecundarios, Aula.class);
    final Procedure1<Aula> _function = new Procedure1<Aula>() {
      public void apply(final Aula aula) {
        PdmValidator.this.estaRepetidaElAula(aula, aulas);
      }
    };
    IterableExtensions.<Aula>forEach(aulas, _function);
  }
  
  public void estaRepetidaElAula(final Aula aula, final Iterable<Aula> aulas) {
    int count = 0;
    for (final Aula a : aulas) {
      String _name = aula.getName();
      String _name_1 = a.getName();
      boolean _equals = _name.equals(_name_1);
      if (_equals) {
        count = (count + 1);
      }
    }
    if ((count >= 2)) {
      this.error("Aula repetida", aula, PlanificadorDeMateriasDslPackage.Literals.AULA__CAPACIDAD);
    }
  }
  
  @Check
  public void validateMateriasRepetidas(final Model m) {
    EList<ElementosPrimarios> _elementosPrimarios = m.getElementosPrimarios();
    final Iterable<Materia> materias = Iterables.<Materia>filter(_elementosPrimarios, Materia.class);
    final Procedure1<Materia> _function = new Procedure1<Materia>() {
      public void apply(final Materia materia) {
        PdmValidator.this.estaRepetidaLaMateria(materia, materias);
      }
    };
    IterableExtensions.<Materia>forEach(materias, _function);
  }
  
  public void estaRepetidaLaMateria(final Materia materia, final Iterable<Materia> m) {
    int count = 0;
    for (final Materia mat : m) {
      String _name = mat.getName();
      String _name_1 = materia.getName();
      boolean _equals = _name.equals(_name_1);
      if (_equals) {
        count = (count + 1);
      }
    }
    if ((count >= 2)) {
      this.error("Materia repetida", materia, PlanificadorDeMateriasDslPackage.Literals.MATERIA__NAME);
    }
  }
  
  @Check
  public void validateDedicacion(final Profesor p) {
    EObject _eContainer = p.eContainer();
    this.materiasQueDicta(p, ((Model) _eContainer));
  }
  
  public void materiasQueDicta(final Profesor p, final Model model) {
    EList<Planificacion> planificaciones = model.getPlanificacion();
    int count = 0;
    for (final Planificacion planificacion : planificaciones) {
      {
        EList<Asignacion> _asignaciones = planificacion.getAsignaciones();
        for (final Asignacion a : _asignaciones) {
          EList<Profesor> _profesores = a.getProfesores();
          final Function1<Profesor, Boolean> _function = new Function1<Profesor, Boolean>() {
            public Boolean apply(final Profesor profe) {
              String _name = profe.getName();
              String _name_1 = p.getName();
              return Boolean.valueOf(_name.equals(_name_1));
            }
          };
          boolean _exists = IterableExtensions.<Profesor>exists(_profesores, _function);
          if (_exists) {
            count = (count + 1);
          }
        }
        this.validarDedicacion(p, count, planificacion);
        count = 0;
      }
    }
  }
  
  public void validarDedicacion(final Profesor p, final int materiasQueDicta, final Planificacion pl) {
    boolean _and = false;
    Dedicacion _dedicacion = p.getDedicacion();
    EClass _eClass = _dedicacion.eClass();
    String _name = _eClass.getName();
    boolean _equals = _name.equals("EXCLUSIVA");
    if (!_equals) {
      _and = false;
    } else {
      _and = ((materiasQueDicta < 2) || (materiasQueDicta > 5));
    }
    if (_and) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Tiene ");
      _builder.append(materiasQueDicta, "");
      _builder.append(" materia asignada y necesita de 2 hasta 5 materias");
      this.error(_builder.toString(), p, 
        PlanificadorDeMateriasDslPackage.Literals.PROFESOR__NAME);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Tiene ");
      _builder_1.append(materiasQueDicta, "");
      _builder_1.append(" materia asignada y necesita de 2 hasta 5 materias");
      this.error(_builder_1.toString(), pl, 
        PlanificadorDeMateriasDslPackage.Literals.PLANIFICACION__ASIGNACIONES);
    }
    boolean _and_1 = false;
    Dedicacion _dedicacion_1 = p.getDedicacion();
    if (!(_dedicacion_1 instanceof SEMI)) {
      _and_1 = false;
    } else {
      _and_1 = (materiasQueDicta != 2);
    }
    if (_and_1) {
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("Tiene ");
      _builder_2.append(materiasQueDicta, "");
      _builder_2.append(" materia asignada y necesita de 2 materias");
      this.error(_builder_2.toString(), p, 
        PlanificadorDeMateriasDslPackage.Literals.PROFESOR__NAME);
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append("Tiene ");
      _builder_3.append(materiasQueDicta, "");
      _builder_3.append(" materia asignada y necesita de 2 materias");
      this.error(_builder_3.toString(), pl, 
        PlanificadorDeMateriasDslPackage.Literals.PLANIFICACION__ASIGNACIONES);
    }
    boolean _and_2 = false;
    Dedicacion _dedicacion_2 = p.getDedicacion();
    EClass _eClass_1 = _dedicacion_2.eClass();
    String _name_1 = _eClass_1.getName();
    boolean _equals_1 = _name_1.equals("SIMPLE");
    if (!_equals_1) {
      _and_2 = false;
    } else {
      _and_2 = (materiasQueDicta != 1);
    }
    if (_and_2) {
      StringConcatenation _builder_4 = new StringConcatenation();
      _builder_4.append("Tiene ");
      _builder_4.append(materiasQueDicta, "");
      _builder_4.append(" materia asignada y necesita de 1 materia");
      this.error(_builder_4.toString(), p, 
        PlanificadorDeMateriasDslPackage.Literals.PROFESOR__NAME);
      StringConcatenation _builder_5 = new StringConcatenation();
      _builder_5.append("Tiene ");
      _builder_5.append(materiasQueDicta, "");
      _builder_5.append(" materia asignada y necesita de 1 materia");
      this.error(_builder_5.toString(), pl, 
        PlanificadorDeMateriasDslPackage.Literals.PLANIFICACION__ASIGNACIONES);
    }
  }
  
  @Check
  public void validateSuperposicionDeMateriasEnAulas(final Model m) {
    final Model model = m;
    EList<Planificacion> planificaciones = model.getPlanificacion();
    final Procedure1<Planificacion> _function = new Procedure1<Planificacion>() {
      public void apply(final Planificacion planificacion) {
        EList<Asignacion> _asignaciones = planificacion.getAsignaciones();
        final Procedure1<Asignacion> _function = new Procedure1<Asignacion>() {
          public void apply(final Asignacion asignacion) {
            EList<AulaHorario> _aulaHorarios = asignacion.getAulaHorarios();
            final Procedure1<AulaHorario> _function = new Procedure1<AulaHorario>() {
              public void apply(final AulaHorario aulaHorario) {
                PdmValidator.this.chequearHorarioSuperpuesto(planificacion, aulaHorario);
              }
            };
            IterableExtensions.<AulaHorario>forEach(_aulaHorarios, _function);
          }
        };
        IterableExtensions.<Asignacion>forEach(_asignaciones, _function);
      }
    };
    IterableExtensions.<Planificacion>forEach(planificaciones, _function);
  }
  
  public void chequearHorarioSuperpuesto(final Planificacion planificacion, final AulaHorario aulaHorario) {
    EList<Asignacion> _asignaciones = planificacion.getAsignaciones();
    for (final Asignacion asignacion : _asignaciones) {
      {
        Horario _horario = aulaHorario.getHorario();
        final int desde = _horario.getDesde();
        Horario _horario_1 = aulaHorario.getHorario();
        final int hasta = _horario_1.getHasta();
        EList<AulaHorario> _aulaHorarios = asignacion.getAulaHorarios();
        final Function1<AulaHorario, Boolean> _function = new Function1<AulaHorario, Boolean>() {
          public Boolean apply(final AulaHorario aHorario) {
            boolean _and = false;
            boolean _and_1 = false;
            boolean _and_2 = false;
            boolean _or = false;
            boolean _or_1 = false;
            boolean _and_3 = false;
            Horario _horario = aHorario.getHorario();
            int _desde = _horario.getDesde();
            boolean _greaterThan = (_desde > desde);
            if (!_greaterThan) {
              _and_3 = false;
            } else {
              Horario _horario_1 = aHorario.getHorario();
              int _desde_1 = _horario_1.getDesde();
              boolean _lessThan = (_desde_1 < hasta);
              _and_3 = _lessThan;
            }
            if (_and_3) {
              _or_1 = true;
            } else {
              boolean _and_4 = false;
              Horario _horario_2 = aHorario.getHorario();
              int _hasta = _horario_2.getHasta();
              boolean _greaterThan_1 = (_hasta > desde);
              if (!_greaterThan_1) {
                _and_4 = false;
              } else {
                Horario _horario_3 = aHorario.getHorario();
                int _hasta_1 = _horario_3.getHasta();
                boolean _lessThan_1 = (_hasta_1 < hasta);
                _and_4 = _lessThan_1;
              }
              _or_1 = _and_4;
            }
            if (_or_1) {
              _or = true;
            } else {
              boolean _and_5 = false;
              Horario _horario_4 = aHorario.getHorario();
              int _desde_2 = _horario_4.getDesde();
              boolean _equals = (_desde_2 == desde);
              if (!_equals) {
                _and_5 = false;
              } else {
                Horario _horario_5 = aHorario.getHorario();
                int _hasta_2 = _horario_5.getHasta();
                boolean _equals_1 = (_hasta_2 == hasta);
                _and_5 = _equals_1;
              }
              _or = _and_5;
            }
            if (!_or) {
              _and_2 = false;
            } else {
              Aula _aula = aulaHorario.getAula();
              String _name = _aula.getName();
              Aula _aula_1 = aHorario.getAula();
              String _name_1 = _aula_1.getName();
              boolean _equals_2 = _name.equals(_name_1);
              _and_2 = _equals_2;
            }
            if (!_and_2) {
              _and_1 = false;
            } else {
              Dia _dia = aulaHorario.getDia();
              EClass _eClass = _dia.eClass();
              String _name_2 = _eClass.getName();
              Dia _dia_1 = aHorario.getDia();
              EClass _eClass_1 = _dia_1.eClass();
              String _name_3 = _eClass_1.getName();
              boolean _equals_3 = _name_2.equals(_name_3);
              _and_1 = _equals_3;
            }
            if (!_and_1) {
              _and = false;
            } else {
              int _hashCode = aulaHorario.hashCode();
              int _hashCode_1 = aHorario.hashCode();
              boolean _equals_4 = Integer.valueOf(_hashCode).equals(Integer.valueOf(_hashCode_1));
              boolean _not = (!_equals_4);
              _and = _not;
            }
            return Boolean.valueOf(_and);
          }
        };
        boolean existe = IterableExtensions.<AulaHorario>exists(_aulaHorarios, _function);
        if (existe) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("El horario en el aula ya esta en uso");
          this.error(_builder.toString(), asignacion, 
            PlanificadorDeMateriasDslPackage.Literals.ASIGNACION__AULA_HORARIOS);
        }
      }
    }
  }
  
  @Check
  public void validateDiasRepetidos(final Planificacion p) {
    EList<Asignacion> _asignaciones = p.getAsignaciones();
    final Procedure1<Asignacion> _function = new Procedure1<Asignacion>() {
      public void apply(final Asignacion asignacion) {
        EList<AulaHorario> _aulaHorarios = asignacion.getAulaHorarios();
        final Procedure1<AulaHorario> _function = new Procedure1<AulaHorario>() {
          public void apply(final AulaHorario aulaHorario) {
            Dia _dia = aulaHorario.getDia();
            EList<AulaHorario> _aulaHorarios = asignacion.getAulaHorarios();
            PdmValidator.this.estaRepetidoElDia(_dia, _aulaHorarios);
          }
        };
        IterableExtensions.<AulaHorario>forEach(_aulaHorarios, _function);
      }
    };
    IterableExtensions.<Asignacion>forEach(_asignaciones, _function);
  }
  
  public void estaRepetidoElDia(final Dia dia, final Iterable<AulaHorario> aulaHorarios) {
    int count = 0;
    for (final AulaHorario ah : aulaHorarios) {
      {
        Dia _dia = ah.getDia();
        EClass _eClass = _dia.eClass();
        String _name = _eClass.getName();
        EClass _eClass_1 = dia.eClass();
        String _name_1 = _eClass_1.getName();
        boolean _equals = _name.equals(_name_1);
        if (_equals) {
          count = (count + 1);
        }
        if ((count >= 2)) {
          this.error("Dia repetido", ah, PlanificadorDeMateriasDslPackage.Literals.AULA_HORARIO__DIA);
        }
      }
    }
  }
  
  @Check
  public void validateCargaHorariaMaterias(final Planificacion p) {
    EList<Asignacion> _asignaciones = p.getAsignaciones();
    final Procedure1<Asignacion> _function = new Procedure1<Asignacion>() {
      public void apply(final Asignacion asignacion) {
        PdmValidator.this.chequearCantidadDiasSemanales(asignacion);
        PdmValidator.this.chequearCantidadHorasSemanales(asignacion);
      }
    };
    IterableExtensions.<Asignacion>forEach(_asignaciones, _function);
  }
  
  public void chequearCantidadHorasSemanales(final Asignacion asignacion) {
    int horasSemanales = this.horasSemanales(asignacion);
    String mensajeDeError = "";
    Materia _materia = asignacion.getMateria();
    CargaHoraria _cargaHoraria = _materia.getCargaHoraria();
    int horasAsignadas = _cargaHoraria.getCantHoras();
    if ((horasSemanales != horasAsignadas)) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("La materia se dicta ");
      String _horas = this.horas(Integer.valueOf(horasSemanales));
      _builder.append(_horas, "");
      _builder.append(" a la semana, y tiene asignadas ");
      String _horas_1 = this.horas(Integer.valueOf(horasAsignadas));
      _builder.append(_horas_1, "");
      mensajeDeError = _builder.toString();
      this.error(mensajeDeError, asignacion, PlanificadorDeMateriasDslPackage.Literals.ASIGNACION__MATERIA);
    }
  }
  
  public String horas(final Integer i) {
    String _xifexpression = null;
    if (((i).intValue() > 1)) {
      _xifexpression = "horas";
    } else {
      _xifexpression = "hora";
    }
    return (i + _xifexpression);
  }
  
  public void chequearCantidadDiasSemanales(final Asignacion asignacion) {
    String mensajeDeError = "";
    Materia _materia = asignacion.getMateria();
    CargaHoraria _cargaHoraria = _materia.getCargaHoraria();
    int diasSemanales = _cargaHoraria.getDiasSemanales();
    EList<AulaHorario> _aulaHorarios = asignacion.getAulaHorarios();
    int diasAsignados = _aulaHorarios.size();
    if ((diasSemanales != diasAsignados)) {
      if ((diasSemanales == 1)) {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("La materia se dicta ");
        _builder.append(diasSemanales, "");
        _builder.append(" dia a la semana, y tiene asignados ");
        _builder.append(diasAsignados, "");
        _builder.append(" dias");
        mensajeDeError = _builder.toString();
      } else {
        if ((diasAsignados == 1)) {
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("La materia se dicta ");
          _builder_1.append(diasSemanales, "");
          _builder_1.append(" dias a la semana, y tiene asignado ");
          _builder_1.append(diasAsignados, "");
          _builder_1.append(" dia");
          mensajeDeError = _builder_1.toString();
        } else {
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("La materia se dicta ");
          _builder_2.append(diasSemanales, "");
          _builder_2.append(" dias a la semana, y tiene asignados ");
          _builder_2.append(diasAsignados, "");
          _builder_2.append(" dias");
          mensajeDeError = _builder_2.toString();
        }
      }
      this.error(mensajeDeError, asignacion, PlanificadorDeMateriasDslPackage.Literals.ASIGNACION__MATERIA);
    }
  }
  
  public int horasSemanales(final Asignacion asignacion) {
    int _xblockexpression = (int) 0;
    {
      int horas = 0;
      EList<AulaHorario> _aulaHorarios = asignacion.getAulaHorarios();
      for (final AulaHorario aulaHorario : _aulaHorarios) {
        Horario _horario = aulaHorario.getHorario();
        int _hasta = _horario.getHasta();
        Horario _horario_1 = aulaHorario.getHorario();
        int _desde = _horario_1.getDesde();
        int _minus = (_hasta - _desde);
        int _plus = (horas + _minus);
        horas = _plus;
      }
      _xblockexpression = horas;
    }
    return _xblockexpression;
  }
  
  @Check
  public void validateCantidadInscriptos(final Planificacion p) {
    EList<Asignacion> _asignaciones = p.getAsignaciones();
    final Procedure1<Asignacion> _function = new Procedure1<Asignacion>() {
      public void apply(final Asignacion asignacion) {
        EList<AulaHorario> _aulaHorarios = asignacion.getAulaHorarios();
        final Procedure1<AulaHorario> _function = new Procedure1<AulaHorario>() {
          public void apply(final AulaHorario aulaHorario) {
            Aula _aula = aulaHorario.getAula();
            int _capacidad = _aula.getCapacidad();
            int _inscriptos = asignacion.getInscriptos();
            boolean _lessThan = (_capacidad < _inscriptos);
            if (_lessThan) {
              StringConcatenation _builder = new StringConcatenation();
              _builder.append("El aula no tiene la capacidad (");
              Aula _aula_1 = aulaHorario.getAula();
              int _capacidad_1 = _aula_1.getCapacidad();
              _builder.append(_capacidad_1, "");
              _builder.append(") necesaria para ");
              int _inscriptos_1 = asignacion.getInscriptos();
              _builder.append(_inscriptos_1, "");
              _builder.append(" inscriptos");
              PdmValidator.this.error(_builder.toString(), asignacion, PlanificadorDeMateriasDslPackage.Literals.ASIGNACION__INSCRIPTOS);
            }
          }
        };
        IterableExtensions.<AulaHorario>forEach(_aulaHorarios, _function);
      }
    };
    IterableExtensions.<Asignacion>forEach(_asignaciones, _function);
  }
  
  @Check
  public void validateRecursos(final Planificacion planificacion) {
    EList<Asignacion> _asignaciones = planificacion.getAsignaciones();
    final Procedure1<Asignacion> _function = new Procedure1<Asignacion>() {
      public void apply(final Asignacion asignacion) {
        Materia _materia = asignacion.getMateria();
        EList<AulaHorario> _aulaHorarios = asignacion.getAulaHorarios();
        PdmValidator.this.tieneLosRecursosNecesarios(_materia, _aulaHorarios);
      }
    };
    IterableExtensions.<Asignacion>forEach(_asignaciones, _function);
  }
  
  public void tieneLosRecursosNecesarios(final Materia materia, final List<AulaHorario> aulaHorarios) {
    EList<Recurso> _recursos = materia.getRecursos();
    final Procedure1<Recurso> _function = new Procedure1<Recurso>() {
      public void apply(final Recurso recurso) {
        final Procedure1<AulaHorario> _function = new Procedure1<AulaHorario>() {
          public void apply(final AulaHorario aHorario) {
            Aula _aula = aHorario.getAula();
            EList<Recurso> _recursos = _aula.getRecursos();
            final Function1<Recurso, Boolean> _function = new Function1<Recurso, Boolean>() {
              public Boolean apply(final Recurso rec) {
                String _name = rec.getName();
                String _name_1 = recurso.getName();
                return Boolean.valueOf(_name.equals(_name_1));
              }
            };
            boolean _exists = IterableExtensions.<Recurso>exists(_recursos, _function);
            boolean _not = (!_exists);
            if (_not) {
              PdmValidator.this.error("El aula no tiene los recursos necesarios para la materia", aHorario, PlanificadorDeMateriasDslPackage.Literals.AULA_HORARIO__AULA);
            }
          }
        };
        IterableExtensions.<AulaHorario>forEach(aulaHorarios, _function);
      }
    };
    IterableExtensions.<Recurso>forEach(_recursos, _function);
  }
  
  @Check
  public void validateProfesorConCurso(final Model m) {
    Model model = m;
    EList<Planificacion> planificaciones = model.getPlanificacion();
    for (final Planificacion planificaion : planificaciones) {
      EList<Asignacion> _asignaciones = planificaion.getAsignaciones();
      for (final Asignacion asignacion : _asignaciones) {
        EList<Profesor> _profesores = asignacion.getProfesores();
        for (final Profesor profesor : _profesores) {
          try {
            this.chequearDisponibilidadAsignacion(profesor, asignacion);
          } catch (final Throwable _t) {
            if (_t instanceof Exception) {
              final Exception e = (Exception)_t;
            } else {
              throw Exceptions.sneakyThrow(_t);
            }
          }
        }
      }
    }
  }
  
  public void chequearDisponibilidadAsignacion(final Profesor profesor, final Asignacion asignacion) {
    EList<Profesor> _profesores = asignacion.getProfesores();
    final Function1<Profesor, Boolean> _function = new Function1<Profesor, Boolean>() {
      public Boolean apply(final Profesor p) {
        String _name = p.getName();
        String _name_1 = profesor.getName();
        return Boolean.valueOf(_name.equals(_name_1));
      }
    };
    boolean _exists = IterableExtensions.<Profesor>exists(_profesores, _function);
    if (_exists) {
      EList<AulaHorario> _aulaHorarios = asignacion.getAulaHorarios();
      for (final AulaHorario aulaHorario : _aulaHorarios) {
        Disponibilidad _disponibilidad = profesor.getDisponibilidad();
        EList<Dia> _diasNoPuede = _disponibilidad.getDiasNoPuede();
        final Function1<Dia, Boolean> _function_1 = new Function1<Dia, Boolean>() {
          public Boolean apply(final Dia d) {
            EClass _eClass = d.eClass();
            String _name = _eClass.getName();
            Dia _dia = aulaHorario.getDia();
            EClass _eClass_1 = _dia.eClass();
            String _name_1 = _eClass_1.getName();
            return Boolean.valueOf(_name.equals(_name_1));
          }
        };
        boolean _exists_1 = IterableExtensions.<Dia>exists(_diasNoPuede, _function_1);
        if (_exists_1) {
          this.error("El profesor especifico que no puede asistir ese dia", aulaHorario, PlanificadorDeMateriasDslPackage.Literals.AULA_HORARIO__DIA);
        } else {
          Disponibilidad _disponibilidad_1 = profesor.getDisponibilidad();
          EList<DiaHorario> _diasHorario = _disponibilidad_1.getDiasHorario();
          final Function1<DiaHorario, Boolean> _function_2 = new Function1<DiaHorario, Boolean>() {
            public Boolean apply(final DiaHorario dh) {
              Dia _diaPuede = dh.getDiaPuede();
              Class<? extends Dia> _class = _diaPuede.getClass();
              String _name = _class.getName();
              Dia _dia = aulaHorario.getDia();
              Class<? extends Dia> _class_1 = _dia.getClass();
              String _name_1 = _class_1.getName();
              return Boolean.valueOf(_name.equals(_name_1));
            }
          };
          boolean _exists_2 = IterableExtensions.<DiaHorario>exists(_diasHorario, _function_2);
          boolean _not = (!_exists_2);
          if (_not) {
            this.warning("Puede ser que el profesor no pueda asistir,debido a que el dia no fue especificado en su disponibilidad", aulaHorario, PlanificadorDeMateriasDslPackage.Literals.AULA_HORARIO__DIA);
          } else {
            Disponibilidad _disponibilidad_2 = profesor.getDisponibilidad();
            EList<DiaHorario> _diasHorario_1 = _disponibilidad_2.getDiasHorario();
            final Function1<DiaHorario, Boolean> _function_3 = new Function1<DiaHorario, Boolean>() {
              public Boolean apply(final DiaHorario dh) {
                return Boolean.valueOf(PdmValidator.this.coincidenHorariosDisponibles(dh, aulaHorario));
              }
            };
            boolean _exists_3 = IterableExtensions.<DiaHorario>exists(_diasHorario_1, _function_3);
            boolean _not_1 = (!_exists_3);
            if (_not_1) {
              this.error("El profesor no esta disponible en este horario", aulaHorario, PlanificadorDeMateriasDslPackage.Literals.AULA_HORARIO__DIA);
            }
          }
        }
      }
    }
  }
  
  public boolean coincidenHorariosDisponibles(final DiaHorario diaHorario, final AulaHorario ahorario) {
    boolean _and = false;
    Horario _horario = ahorario.getHorario();
    int _desde = _horario.getDesde();
    Horario _horario_1 = diaHorario.getHorario();
    int _desde_1 = _horario_1.getDesde();
    boolean _greaterEqualsThan = (_desde >= _desde_1);
    if (!_greaterEqualsThan) {
      _and = false;
    } else {
      Horario _horario_2 = ahorario.getHorario();
      int _hasta = _horario_2.getHasta();
      Horario _horario_3 = diaHorario.getHorario();
      int _hasta_1 = _horario_3.getHasta();
      boolean _lessEqualsThan = (_hasta <= _hasta_1);
      _and = _lessEqualsThan;
    }
    return _and;
  }
}
