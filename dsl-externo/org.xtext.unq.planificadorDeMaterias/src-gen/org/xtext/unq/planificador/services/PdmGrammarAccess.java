/*
* generated by Xtext
*/
package org.xtext.unq.planificador.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class PdmGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProfesorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProfesorsProfesorParserRuleCall_0_0 = (RuleCall)cProfesorsAssignment_0.eContents().get(0);
		private final Assignment cHorasAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHorasHoraParserRuleCall_1_0 = (RuleCall)cHorasAssignment_1.eContents().get(0);
		private final Assignment cMateriasAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMateriasMateriaParserRuleCall_2_0 = (RuleCall)cMateriasAssignment_2.eContents().get(0);
		private final Assignment cAulasAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAulasAulaParserRuleCall_3_0 = (RuleCall)cAulasAssignment_3.eContents().get(0);
		private final Assignment cCargasHorariasAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCargasHorariasCargaHorariaParserRuleCall_4_0 = (RuleCall)cCargasHorariasAssignment_4.eContents().get(0);
		private final Assignment cCargasHorariasDocentesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCargasHorariasDocentesCargaHorariaDocenteParserRuleCall_5_0 = (RuleCall)cCargasHorariasDocentesAssignment_5.eContents().get(0);
		private final Assignment cHorariosAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cHorariosHorariosParserRuleCall_6_0 = (RuleCall)cHorariosAssignment_6.eContents().get(0);
		private final Assignment cDiasAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDiasDiaParserRuleCall_7_0 = (RuleCall)cDiasAssignment_7.eContents().get(0);
		private final Assignment cSemestreAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cSemestreSemestreParserRuleCall_8_0 = (RuleCall)cSemestreAssignment_8.eContents().get(0);
		private final Assignment cPlanificacionesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cPlanificacionesPlanificacionParserRuleCall_9_0 = (RuleCall)cPlanificacionesAssignment_9.eContents().get(0);
		private final Assignment cHorariosAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cHorariosHorarioParserRuleCall_10_0 = (RuleCall)cHorariosAssignment_10.eContents().get(0);
		private final Assignment cRecursosAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cRecursosRecursoParserRuleCall_11_0 = (RuleCall)cRecursosAssignment_11.eContents().get(0);
		private final Assignment cRecursosDeMateriasAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cRecursosDeMateriasRecursoMateriaParserRuleCall_12_0 = (RuleCall)cRecursosDeMateriasAssignment_12.eContents().get(0);
		
		//Model:
		//	profesors+=Profesor* horas+=Hora* materias+=Materia* aulas+=Aula* cargasHorarias+=CargaHoraria*
		//	cargasHorariasDocentes+=CargaHorariaDocente* horarios+=Horarios* dias+=Dia* semestre+=Semestre*
		//	planificaciones+=Planificacion* horarios+=Horario* recursos+=Recurso* recursosDeMaterias+=RecursoMateria*;
		public ParserRule getRule() { return rule; }

		//profesors+=Profesor* horas+=Hora* materias+=Materia* aulas+=Aula* cargasHorarias+=CargaHoraria*
		//cargasHorariasDocentes+=CargaHorariaDocente* horarios+=Horarios* dias+=Dia* semestre+=Semestre*
		//planificaciones+=Planificacion* horarios+=Horario* recursos+=Recurso* recursosDeMaterias+=RecursoMateria*
		public Group getGroup() { return cGroup; }

		//profesors+=Profesor*
		public Assignment getProfesorsAssignment_0() { return cProfesorsAssignment_0; }

		//Profesor
		public RuleCall getProfesorsProfesorParserRuleCall_0_0() { return cProfesorsProfesorParserRuleCall_0_0; }

		//horas+=Hora*
		public Assignment getHorasAssignment_1() { return cHorasAssignment_1; }

		//Hora
		public RuleCall getHorasHoraParserRuleCall_1_0() { return cHorasHoraParserRuleCall_1_0; }

		//materias+=Materia*
		public Assignment getMateriasAssignment_2() { return cMateriasAssignment_2; }

		//Materia
		public RuleCall getMateriasMateriaParserRuleCall_2_0() { return cMateriasMateriaParserRuleCall_2_0; }

		//aulas+=Aula*
		public Assignment getAulasAssignment_3() { return cAulasAssignment_3; }

		//Aula
		public RuleCall getAulasAulaParserRuleCall_3_0() { return cAulasAulaParserRuleCall_3_0; }

		//cargasHorarias+=CargaHoraria*
		public Assignment getCargasHorariasAssignment_4() { return cCargasHorariasAssignment_4; }

		//CargaHoraria
		public RuleCall getCargasHorariasCargaHorariaParserRuleCall_4_0() { return cCargasHorariasCargaHorariaParserRuleCall_4_0; }

		//cargasHorariasDocentes+=CargaHorariaDocente*
		public Assignment getCargasHorariasDocentesAssignment_5() { return cCargasHorariasDocentesAssignment_5; }

		//CargaHorariaDocente
		public RuleCall getCargasHorariasDocentesCargaHorariaDocenteParserRuleCall_5_0() { return cCargasHorariasDocentesCargaHorariaDocenteParserRuleCall_5_0; }

		//horarios+=Horarios*
		public Assignment getHorariosAssignment_6() { return cHorariosAssignment_6; }

		//Horarios
		public RuleCall getHorariosHorariosParserRuleCall_6_0() { return cHorariosHorariosParserRuleCall_6_0; }

		//dias+=Dia*
		public Assignment getDiasAssignment_7() { return cDiasAssignment_7; }

		//Dia
		public RuleCall getDiasDiaParserRuleCall_7_0() { return cDiasDiaParserRuleCall_7_0; }

		//semestre+=Semestre*
		public Assignment getSemestreAssignment_8() { return cSemestreAssignment_8; }

		//Semestre
		public RuleCall getSemestreSemestreParserRuleCall_8_0() { return cSemestreSemestreParserRuleCall_8_0; }

		//planificaciones+=Planificacion*
		public Assignment getPlanificacionesAssignment_9() { return cPlanificacionesAssignment_9; }

		//Planificacion
		public RuleCall getPlanificacionesPlanificacionParserRuleCall_9_0() { return cPlanificacionesPlanificacionParserRuleCall_9_0; }

		//horarios+=Horario*
		public Assignment getHorariosAssignment_10() { return cHorariosAssignment_10; }

		//Horario
		public RuleCall getHorariosHorarioParserRuleCall_10_0() { return cHorariosHorarioParserRuleCall_10_0; }

		//recursos+=Recurso*
		public Assignment getRecursosAssignment_11() { return cRecursosAssignment_11; }

		//Recurso
		public RuleCall getRecursosRecursoParserRuleCall_11_0() { return cRecursosRecursoParserRuleCall_11_0; }

		//recursosDeMaterias+=RecursoMateria*
		public Assignment getRecursosDeMateriasAssignment_12() { return cRecursosDeMateriasAssignment_12; }

		//RecursoMateria
		public RuleCall getRecursosDeMateriasRecursoMateriaParserRuleCall_12_0() { return cRecursosDeMateriasRecursoMateriaParserRuleCall_12_0; }
	}

	public class ProfesorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Profesor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProfesorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNombreIDTerminalRuleCall_1_0 = (RuleCall)cNombreAssignment_1.eContents().get(0);
		private final Keyword cDedicacionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDedicacionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDedicacionDedicacionParserRuleCall_3_0 = (RuleCall)cDedicacionAssignment_3.eContents().get(0);
		
		//Profesor:
		//	"profesor" nombre=ID "dedicacion" dedicacion=Dedicacion;
		public ParserRule getRule() { return rule; }

		//"profesor" nombre=ID "dedicacion" dedicacion=Dedicacion
		public Group getGroup() { return cGroup; }

		//"profesor"
		public Keyword getProfesorKeyword_0() { return cProfesorKeyword_0; }

		//nombre=ID
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }

		//ID
		public RuleCall getNombreIDTerminalRuleCall_1_0() { return cNombreIDTerminalRuleCall_1_0; }

		//"dedicacion"
		public Keyword getDedicacionKeyword_2() { return cDedicacionKeyword_2; }

		//dedicacion=Dedicacion
		public Assignment getDedicacionAssignment_3() { return cDedicacionAssignment_3; }

		//Dedicacion
		public RuleCall getDedicacionDedicacionParserRuleCall_3_0() { return cDedicacionDedicacionParserRuleCall_3_0; }
	}

	public class HoraElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Hora");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHoraKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHoraAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHoraINTTerminalRuleCall_1_0 = (RuleCall)cHoraAssignment_1.eContents().get(0);
		
		//Hora:
		//	"hora" hora=INT;
		public ParserRule getRule() { return rule; }

		//"hora" hora=INT
		public Group getGroup() { return cGroup; }

		//"hora"
		public Keyword getHoraKeyword_0() { return cHoraKeyword_0; }

		//hora=INT
		public Assignment getHoraAssignment_1() { return cHoraAssignment_1; }

		//INT
		public RuleCall getHoraINTTerminalRuleCall_1_0() { return cHoraINTTerminalRuleCall_1_0; }
	}

	public class DedicacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dedicacion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSIMPLEParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSEMIParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEXCLUSIVAParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Dedicacion:
		//	SIMPLE | SEMI | EXCLUSIVA;
		public ParserRule getRule() { return rule; }

		//SIMPLE | SEMI | EXCLUSIVA
		public Alternatives getAlternatives() { return cAlternatives; }

		//SIMPLE
		public RuleCall getSIMPLEParserRuleCall_0() { return cSIMPLEParserRuleCall_0; }

		//SEMI
		public RuleCall getSEMIParserRuleCall_1() { return cSEMIParserRuleCall_1; }

		//EXCLUSIVA
		public RuleCall getEXCLUSIVAParserRuleCall_2() { return cEXCLUSIVAParserRuleCall_2; }
	}

	public class SIMPLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SIMPLE");
		private final Keyword cSimpleKeyword = (Keyword)rule.eContents().get(1);
		
		//SIMPLE:
		//	"simple";
		public ParserRule getRule() { return rule; }

		//"simple"
		public Keyword getSimpleKeyword() { return cSimpleKeyword; }
	}

	public class SEMIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SEMI");
		private final Keyword cSemiKeyword = (Keyword)rule.eContents().get(1);
		
		//SEMI:
		//	"semi";
		public ParserRule getRule() { return rule; }

		//"semi"
		public Keyword getSemiKeyword() { return cSemiKeyword; }
	}

	public class EXCLUSIVAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EXCLUSIVA");
		private final Keyword cExclusivaKeyword = (Keyword)rule.eContents().get(1);
		
		//EXCLUSIVA:
		//	"exclusiva";
		public ParserRule getRule() { return rule; }

		//"exclusiva"
		public Keyword getExclusivaKeyword() { return cExclusivaKeyword; }
	}

	public class MateriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Materia");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMateriaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNombreIDTerminalRuleCall_1_0 = (RuleCall)cNombreAssignment_1.eContents().get(0);
		private final Keyword cConKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCargaHorariaAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCargaHorariaCargaHorariaParserRuleCall_3_0 = (RuleCall)cCargaHorariaAssignment_3.eContents().get(0);
		
		//Materia:
		//	"materia" nombre=ID "con" cargaHoraria=CargaHoraria;
		public ParserRule getRule() { return rule; }

		//"materia" nombre=ID "con" cargaHoraria=CargaHoraria
		public Group getGroup() { return cGroup; }

		//"materia"
		public Keyword getMateriaKeyword_0() { return cMateriaKeyword_0; }

		//nombre=ID
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }

		//ID
		public RuleCall getNombreIDTerminalRuleCall_1_0() { return cNombreIDTerminalRuleCall_1_0; }

		//"con"
		public Keyword getConKeyword_2() { return cConKeyword_2; }

		//cargaHoraria=CargaHoraria
		public Assignment getCargaHorariaAssignment_3() { return cCargaHorariaAssignment_3; }

		//CargaHoraria
		public RuleCall getCargaHorariaCargaHorariaParserRuleCall_3_0() { return cCargaHorariaCargaHorariaParserRuleCall_3_0; }
	}

	public class AulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Aula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAulaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNombreIDTerminalRuleCall_1_0 = (RuleCall)cNombreAssignment_1.eContents().get(0);
		
		//Aula:
		//	"aula" nombre+=ID;
		public ParserRule getRule() { return rule; }

		//"aula" nombre+=ID
		public Group getGroup() { return cGroup; }

		//"aula"
		public Keyword getAulaKeyword_0() { return cAulaKeyword_0; }

		//nombre+=ID
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }

		//ID
		public RuleCall getNombreIDTerminalRuleCall_1_0() { return cNombreIDTerminalRuleCall_1_0; }
	}

	public class CargaHorariaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CargaHoraria");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCargaHorariaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCantDiasAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCantDiasINTTerminalRuleCall_1_0 = (RuleCall)cCantDiasAssignment_1.eContents().get(0);
		private final Keyword cDiasKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDiasAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDiasINTTerminalRuleCall_3_0 = (RuleCall)cDiasAssignment_3.eContents().get(0);
		
		//CargaHoraria:
		//	"cargaHoraria" cantDias=INT "dias" dias=INT;
		public ParserRule getRule() { return rule; }

		//"cargaHoraria" cantDias=INT "dias" dias=INT
		public Group getGroup() { return cGroup; }

		//"cargaHoraria"
		public Keyword getCargaHorariaKeyword_0() { return cCargaHorariaKeyword_0; }

		//cantDias=INT
		public Assignment getCantDiasAssignment_1() { return cCantDiasAssignment_1; }

		//INT
		public RuleCall getCantDiasINTTerminalRuleCall_1_0() { return cCantDiasINTTerminalRuleCall_1_0; }

		//"dias"
		public Keyword getDiasKeyword_2() { return cDiasKeyword_2; }

		//dias=INT
		public Assignment getDiasAssignment_3() { return cDiasAssignment_3; }

		//INT
		public RuleCall getDiasINTTerminalRuleCall_3_0() { return cDiasINTTerminalRuleCall_3_0; }
	}

	public class CargaHorariaDocenteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CargaHorariaDocente");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNombreAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNombreProfesorParserRuleCall_0_0 = (RuleCall)cNombreAssignment_0.eContents().get(0);
		private final Keyword cTieneKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTipoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTipoCargaHorariaParserRuleCall_2_0 = (RuleCall)cTipoAssignment_2.eContents().get(0);
		
		//CargaHorariaDocente:
		//	nombre=Profesor "tiene" tipo=CargaHoraria;
		public ParserRule getRule() { return rule; }

		//nombre=Profesor "tiene" tipo=CargaHoraria
		public Group getGroup() { return cGroup; }

		//nombre=Profesor
		public Assignment getNombreAssignment_0() { return cNombreAssignment_0; }

		//Profesor
		public RuleCall getNombreProfesorParserRuleCall_0_0() { return cNombreProfesorParserRuleCall_0_0; }

		//"tiene"
		public Keyword getTieneKeyword_1() { return cTieneKeyword_1; }

		//tipo=CargaHoraria
		public Assignment getTipoAssignment_2() { return cTipoAssignment_2; }

		//CargaHoraria
		public RuleCall getTipoCargaHorariaParserRuleCall_2_0() { return cTipoCargaHorariaParserRuleCall_2_0; }
	}

	public class HorarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Horario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDiaAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDiaDiaParserRuleCall_0_0 = (RuleCall)cDiaAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDesdeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDesdeHoraParserRuleCall_2_0 = (RuleCall)cDesdeAssignment_2.eContents().get(0);
		private final Keyword cAKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cHastaAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cHastaHoraParserRuleCall_4_0 = (RuleCall)cHastaAssignment_4.eContents().get(0);
		private final Keyword cHsSeDictaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMateriaAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMateriaMateriaParserRuleCall_6_0 = (RuleCall)cMateriaAssignment_6.eContents().get(0);
		private final Keyword cEnKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cAulaAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cAulaAulaParserRuleCall_8_0 = (RuleCall)cAulaAssignment_8.eContents().get(0);
		
		//Horario:
		//	dia=Dia ":" desde=Hora "a" hasta=Hora "hs se dicta" materia=Materia "en" aula=Aula;
		public ParserRule getRule() { return rule; }

		//dia=Dia ":" desde=Hora "a" hasta=Hora "hs se dicta" materia=Materia "en" aula=Aula
		public Group getGroup() { return cGroup; }

		//dia=Dia
		public Assignment getDiaAssignment_0() { return cDiaAssignment_0; }

		//Dia
		public RuleCall getDiaDiaParserRuleCall_0_0() { return cDiaDiaParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//desde=Hora
		public Assignment getDesdeAssignment_2() { return cDesdeAssignment_2; }

		//Hora
		public RuleCall getDesdeHoraParserRuleCall_2_0() { return cDesdeHoraParserRuleCall_2_0; }

		//"a"
		public Keyword getAKeyword_3() { return cAKeyword_3; }

		//hasta=Hora
		public Assignment getHastaAssignment_4() { return cHastaAssignment_4; }

		//Hora
		public RuleCall getHastaHoraParserRuleCall_4_0() { return cHastaHoraParserRuleCall_4_0; }

		//"hs se dicta"
		public Keyword getHsSeDictaKeyword_5() { return cHsSeDictaKeyword_5; }

		//materia=Materia
		public Assignment getMateriaAssignment_6() { return cMateriaAssignment_6; }

		//Materia
		public RuleCall getMateriaMateriaParserRuleCall_6_0() { return cMateriaMateriaParserRuleCall_6_0; }

		//"en"
		public Keyword getEnKeyword_7() { return cEnKeyword_7; }

		//aula=Aula
		public Assignment getAulaAssignment_8() { return cAulaAssignment_8; }

		//Aula
		public RuleCall getAulaAulaParserRuleCall_8_0() { return cAulaAulaParserRuleCall_8_0; }
	}

	public class SemestreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Semestre");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnhoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnhoINTTerminalRuleCall_0_0 = (RuleCall)cAnhoAssignment_0.eContents().get(0);
		private final Keyword cSemestreKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNumeroAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNumeroINTTerminalRuleCall_2_0 = (RuleCall)cNumeroAssignment_2.eContents().get(0);
		
		//Semestre:
		//	anho=INT "semestre" numero=INT;
		public ParserRule getRule() { return rule; }

		//anho=INT "semestre" numero=INT
		public Group getGroup() { return cGroup; }

		//anho=INT
		public Assignment getAnhoAssignment_0() { return cAnhoAssignment_0; }

		//INT
		public RuleCall getAnhoINTTerminalRuleCall_0_0() { return cAnhoINTTerminalRuleCall_0_0; }

		//"semestre"
		public Keyword getSemestreKeyword_1() { return cSemestreKeyword_1; }

		//numero=INT
		public Assignment getNumeroAssignment_2() { return cNumeroAssignment_2; }

		//INT
		public RuleCall getNumeroINTTerminalRuleCall_2_0() { return cNumeroINTTerminalRuleCall_2_0; }
	}

	public class DiaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dia");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDiaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDiaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDiaIDTerminalRuleCall_1_0 = (RuleCall)cDiaAssignment_1.eContents().get(0);
		
		//Dia:
		//	"dia" dia=ID;
		public ParserRule getRule() { return rule; }

		//"dia" dia=ID
		public Group getGroup() { return cGroup; }

		//"dia"
		public Keyword getDiaKeyword_0() { return cDiaKeyword_0; }

		//dia=ID
		public Assignment getDiaAssignment_1() { return cDiaAssignment_1; }

		//ID
		public RuleCall getDiaIDTerminalRuleCall_1_0() { return cDiaIDTerminalRuleCall_1_0; }
	}

	public class HorariosElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Horarios");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHorariosKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHorariosAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHorariosHorarioParserRuleCall_1_0 = (RuleCall)cHorariosAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Horarios:
		//	"horarios {" horarios+=Horario+ "}";
		public ParserRule getRule() { return rule; }

		//"horarios {" horarios+=Horario+ "}"
		public Group getGroup() { return cGroup; }

		//"horarios {"
		public Keyword getHorariosKeyword_0() { return cHorariosKeyword_0; }

		//horarios+=Horario+
		public Assignment getHorariosAssignment_1() { return cHorariosAssignment_1; }

		//Horario
		public RuleCall getHorariosHorarioParserRuleCall_1_0() { return cHorariosHorarioParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class PlanificacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Planificacion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlanificacionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSemestreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSemestreSemestreParserRuleCall_1_0 = (RuleCall)cSemestreAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cADictarKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMateriasAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMateriasMateriaParserRuleCall_4_0 = (RuleCall)cMateriasAssignment_4.eContents().get(0);
		private final Assignment cHorariosAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cHorariosHorariosParserRuleCall_5_0 = (RuleCall)cHorariosAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Planificacion:
		//	"planificacion" semestre=Semestre "{" "a dictar:" materias+=Materia+ horarios=Horarios "}";
		public ParserRule getRule() { return rule; }

		//"planificacion" semestre=Semestre "{" "a dictar:" materias+=Materia+ horarios=Horarios "}"
		public Group getGroup() { return cGroup; }

		//"planificacion"
		public Keyword getPlanificacionKeyword_0() { return cPlanificacionKeyword_0; }

		//semestre=Semestre
		public Assignment getSemestreAssignment_1() { return cSemestreAssignment_1; }

		//Semestre
		public RuleCall getSemestreSemestreParserRuleCall_1_0() { return cSemestreSemestreParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"a dictar:"
		public Keyword getADictarKeyword_3() { return cADictarKeyword_3; }

		//materias+=Materia+
		public Assignment getMateriasAssignment_4() { return cMateriasAssignment_4; }

		//Materia
		public RuleCall getMateriasMateriaParserRuleCall_4_0() { return cMateriasMateriaParserRuleCall_4_0; }

		//horarios=Horarios
		public Assignment getHorariosAssignment_5() { return cHorariosAssignment_5; }

		//Horarios
		public RuleCall getHorariosHorariosParserRuleCall_5_0() { return cHorariosHorariosParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class RecursoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Recurso");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRecursoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNombreIDTerminalRuleCall_1_0 = (RuleCall)cNombreAssignment_1.eContents().get(0);
		
		//Recurso:
		//	"recurso" nombre+=ID;
		public ParserRule getRule() { return rule; }

		//"recurso" nombre+=ID
		public Group getGroup() { return cGroup; }

		//"recurso"
		public Keyword getRecursoKeyword_0() { return cRecursoKeyword_0; }

		//nombre+=ID
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }

		//ID
		public RuleCall getNombreIDTerminalRuleCall_1_0() { return cNombreIDTerminalRuleCall_1_0; }
	}

	public class RecursoMateriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RecursoMateria");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMateriaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMateriaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMateriaMateriaParserRuleCall_1_0 = (RuleCall)cMateriaAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRequiereKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRecursosAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRecursosRecursoParserRuleCall_4_0 = (RuleCall)cRecursosAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RecursoMateria:
		//	"materia" materia=Materia "{" "requiere:" recursos+=Recurso+ "}";
		public ParserRule getRule() { return rule; }

		//"materia" materia=Materia "{" "requiere:" recursos+=Recurso+ "}"
		public Group getGroup() { return cGroup; }

		//"materia"
		public Keyword getMateriaKeyword_0() { return cMateriaKeyword_0; }

		//materia=Materia
		public Assignment getMateriaAssignment_1() { return cMateriaAssignment_1; }

		//Materia
		public RuleCall getMateriaMateriaParserRuleCall_1_0() { return cMateriaMateriaParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"requiere:"
		public Keyword getRequiereKeyword_3() { return cRequiereKeyword_3; }

		//recursos+=Recurso+
		public Assignment getRecursosAssignment_4() { return cRecursosAssignment_4; }

		//Recurso
		public RuleCall getRecursosRecursoParserRuleCall_4_0() { return cRecursosRecursoParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	
	
	private ModelElements pModel;
	private ProfesorElements pProfesor;
	private HoraElements pHora;
	private DedicacionElements pDedicacion;
	private SIMPLEElements pSIMPLE;
	private SEMIElements pSEMI;
	private EXCLUSIVAElements pEXCLUSIVA;
	private MateriaElements pMateria;
	private AulaElements pAula;
	private CargaHorariaElements pCargaHoraria;
	private CargaHorariaDocenteElements pCargaHorariaDocente;
	private HorarioElements pHorario;
	private SemestreElements pSemestre;
	private DiaElements pDia;
	private HorariosElements pHorarios;
	private PlanificacionElements pPlanificacion;
	private RecursoElements pRecurso;
	private RecursoMateriaElements pRecursoMateria;
	
	private final Grammar grammar;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public PdmGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.unq.planificador.Pdm".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//Model:
	//	profesors+=Profesor* horas+=Hora* materias+=Materia* aulas+=Aula* cargasHorarias+=CargaHoraria*
	//	cargasHorariasDocentes+=CargaHorariaDocente* horarios+=Horarios* dias+=Dia* semestre+=Semestre*
	//	planificaciones+=Planificacion* horarios+=Horario* recursos+=Recurso* recursosDeMaterias+=RecursoMateria*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Profesor:
	//	"profesor" nombre=ID "dedicacion" dedicacion=Dedicacion;
	public ProfesorElements getProfesorAccess() {
		return (pProfesor != null) ? pProfesor : (pProfesor = new ProfesorElements());
	}
	
	public ParserRule getProfesorRule() {
		return getProfesorAccess().getRule();
	}

	//Hora:
	//	"hora" hora=INT;
	public HoraElements getHoraAccess() {
		return (pHora != null) ? pHora : (pHora = new HoraElements());
	}
	
	public ParserRule getHoraRule() {
		return getHoraAccess().getRule();
	}

	//Dedicacion:
	//	SIMPLE | SEMI | EXCLUSIVA;
	public DedicacionElements getDedicacionAccess() {
		return (pDedicacion != null) ? pDedicacion : (pDedicacion = new DedicacionElements());
	}
	
	public ParserRule getDedicacionRule() {
		return getDedicacionAccess().getRule();
	}

	//SIMPLE:
	//	"simple";
	public SIMPLEElements getSIMPLEAccess() {
		return (pSIMPLE != null) ? pSIMPLE : (pSIMPLE = new SIMPLEElements());
	}
	
	public ParserRule getSIMPLERule() {
		return getSIMPLEAccess().getRule();
	}

	//SEMI:
	//	"semi";
	public SEMIElements getSEMIAccess() {
		return (pSEMI != null) ? pSEMI : (pSEMI = new SEMIElements());
	}
	
	public ParserRule getSEMIRule() {
		return getSEMIAccess().getRule();
	}

	//EXCLUSIVA:
	//	"exclusiva";
	public EXCLUSIVAElements getEXCLUSIVAAccess() {
		return (pEXCLUSIVA != null) ? pEXCLUSIVA : (pEXCLUSIVA = new EXCLUSIVAElements());
	}
	
	public ParserRule getEXCLUSIVARule() {
		return getEXCLUSIVAAccess().getRule();
	}

	//Materia:
	//	"materia" nombre=ID "con" cargaHoraria=CargaHoraria;
	public MateriaElements getMateriaAccess() {
		return (pMateria != null) ? pMateria : (pMateria = new MateriaElements());
	}
	
	public ParserRule getMateriaRule() {
		return getMateriaAccess().getRule();
	}

	//Aula:
	//	"aula" nombre+=ID;
	public AulaElements getAulaAccess() {
		return (pAula != null) ? pAula : (pAula = new AulaElements());
	}
	
	public ParserRule getAulaRule() {
		return getAulaAccess().getRule();
	}

	//CargaHoraria:
	//	"cargaHoraria" cantDias=INT "dias" dias=INT;
	public CargaHorariaElements getCargaHorariaAccess() {
		return (pCargaHoraria != null) ? pCargaHoraria : (pCargaHoraria = new CargaHorariaElements());
	}
	
	public ParserRule getCargaHorariaRule() {
		return getCargaHorariaAccess().getRule();
	}

	//CargaHorariaDocente:
	//	nombre=Profesor "tiene" tipo=CargaHoraria;
	public CargaHorariaDocenteElements getCargaHorariaDocenteAccess() {
		return (pCargaHorariaDocente != null) ? pCargaHorariaDocente : (pCargaHorariaDocente = new CargaHorariaDocenteElements());
	}
	
	public ParserRule getCargaHorariaDocenteRule() {
		return getCargaHorariaDocenteAccess().getRule();
	}

	//Horario:
	//	dia=Dia ":" desde=Hora "a" hasta=Hora "hs se dicta" materia=Materia "en" aula=Aula;
	public HorarioElements getHorarioAccess() {
		return (pHorario != null) ? pHorario : (pHorario = new HorarioElements());
	}
	
	public ParserRule getHorarioRule() {
		return getHorarioAccess().getRule();
	}

	//Semestre:
	//	anho=INT "semestre" numero=INT;
	public SemestreElements getSemestreAccess() {
		return (pSemestre != null) ? pSemestre : (pSemestre = new SemestreElements());
	}
	
	public ParserRule getSemestreRule() {
		return getSemestreAccess().getRule();
	}

	//Dia:
	//	"dia" dia=ID;
	public DiaElements getDiaAccess() {
		return (pDia != null) ? pDia : (pDia = new DiaElements());
	}
	
	public ParserRule getDiaRule() {
		return getDiaAccess().getRule();
	}

	//Horarios:
	//	"horarios {" horarios+=Horario+ "}";
	public HorariosElements getHorariosAccess() {
		return (pHorarios != null) ? pHorarios : (pHorarios = new HorariosElements());
	}
	
	public ParserRule getHorariosRule() {
		return getHorariosAccess().getRule();
	}

	//Planificacion:
	//	"planificacion" semestre=Semestre "{" "a dictar:" materias+=Materia+ horarios=Horarios "}";
	public PlanificacionElements getPlanificacionAccess() {
		return (pPlanificacion != null) ? pPlanificacion : (pPlanificacion = new PlanificacionElements());
	}
	
	public ParserRule getPlanificacionRule() {
		return getPlanificacionAccess().getRule();
	}

	//Recurso:
	//	"recurso" nombre+=ID;
	public RecursoElements getRecursoAccess() {
		return (pRecurso != null) ? pRecurso : (pRecurso = new RecursoElements());
	}
	
	public ParserRule getRecursoRule() {
		return getRecursoAccess().getRule();
	}

	//RecursoMateria:
	//	"materia" materia=Materia "{" "requiere:" recursos+=Recurso+ "}";
	public RecursoMateriaElements getRecursoMateriaAccess() {
		return (pRecursoMateria != null) ? pRecursoMateria : (pRecursoMateria = new RecursoMateriaElements());
	}
	
	public ParserRule getRecursoMateriaRule() {
		return getRecursoMateriaAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":" default=XExpression)?
	//	"}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | ",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXbase.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
